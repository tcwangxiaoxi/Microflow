/**
 * This class is generated by jOOQ
 */
package com.baidu.microflow.generated.jooq.tables;


import com.baidu.microflow.generated.jooq.Keys;
import com.baidu.microflow.generated.jooq.Microflow;
import com.baidu.microflow.generated.jooq.tables.records.MicroflowJobTaskTraceRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MicroflowJobTaskTrace extends TableImpl<MicroflowJobTaskTraceRecord> {

    private static final long serialVersionUID = 782109594;

    /**
     * The reference instance of <code>microflow.microflow_job_task_trace</code>
     */
    public static final MicroflowJobTaskTrace MICROFLOW_JOB_TASK_TRACE = new MicroflowJobTaskTrace();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MicroflowJobTaskTraceRecord> getRecordType() {
        return MicroflowJobTaskTraceRecord.class;
    }

    /**
     * The column <code>microflow.microflow_job_task_trace.id</code>.
     */
    public final TableField<MicroflowJobTaskTraceRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>microflow.microflow_job_task_trace.job_trace_id</code>.
     */
    public final TableField<MicroflowJobTaskTraceRecord, UInteger> JOB_TRACE_ID = createField("job_trace_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>microflow.microflow_job_task_trace.task_name</code>.
     */
    public final TableField<MicroflowJobTaskTraceRecord, String> TASK_NAME = createField("task_name", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>microflow.microflow_job_task_trace.retries_count</code>.
     */
    public final TableField<MicroflowJobTaskTraceRecord, UInteger> RETRIES_COUNT = createField("retries_count", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>microflow.microflow_job_task_trace.status</code>.
     */
    public final TableField<MicroflowJobTaskTraceRecord, UByte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "");

    /**
     * The column <code>microflow.microflow_job_task_trace.start_time</code>.
     */
    public final TableField<MicroflowJobTaskTraceRecord, Timestamp> START_TIME = createField("start_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>microflow.microflow_job_task_trace.end_time</code>.
     */
    public final TableField<MicroflowJobTaskTraceRecord, Timestamp> END_TIME = createField("end_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>microflow.microflow_job_task_trace</code> table reference
     */
    public MicroflowJobTaskTrace() {
        this("microflow_job_task_trace", null);
    }

    /**
     * Create an aliased <code>microflow.microflow_job_task_trace</code> table reference
     */
    public MicroflowJobTaskTrace(String alias) {
        this(alias, MICROFLOW_JOB_TASK_TRACE);
    }

    private MicroflowJobTaskTrace(String alias, Table<MicroflowJobTaskTraceRecord> aliased) {
        this(alias, aliased, null);
    }

    private MicroflowJobTaskTrace(String alias, Table<MicroflowJobTaskTraceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Microflow.MICROFLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MicroflowJobTaskTraceRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_MICROFLOW_JOB_TASK_TRACE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MicroflowJobTaskTraceRecord> getPrimaryKey() {
        return Keys.KEY_MICROFLOW_JOB_TASK_TRACE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MicroflowJobTaskTraceRecord>> getKeys() {
        return Arrays.<UniqueKey<MicroflowJobTaskTraceRecord>>asList(Keys.KEY_MICROFLOW_JOB_TASK_TRACE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MicroflowJobTaskTrace as(String alias) {
        return new MicroflowJobTaskTrace(alias, this);
    }

    /**
     * Rename this table
     */
    public MicroflowJobTaskTrace rename(String name) {
        return new MicroflowJobTaskTrace(name, null);
    }
}
